// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "forge-std/Test.sol";
import "./utils/YulDeployer.sol";

interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

interface Token is IERC20 {
    function mint(address to, uint256 amount) external returns (bool);
}

contract ERC721RefYulTest is Test {
    YulDeployer yulDeployer = new YulDeployer();

    Token token;

    function setUp() public {
        token = Token(yulDeployer.deployContract("ERC721"));
    }

    function testExample() public {
        emit log_bytes32(Token.mint.selector);
        
        uint256 x = token.totalSupply();
        emit log_bytes32(bytes32(x));

        x = token.balanceOf(address(this));
        emit log_bytes32(bytes32(x));
        
        // bool suc = token.transfer(address(0x123), 1);

        bytes memory data = abi.encodeWithSignature("mint()");
        (bool success, bytes memory retData) = address(token).call(data);

        emit log_bytes(data);
        emit log_bytes(retData);

        assertEq(token.balanceOf(address(this)), 1);
    }
}

// 0x6100093415610398565b6100116101ce565b806370a082311461011857806318160ddd1461010
// b578063a9059cbb146100eb57806323b872dd146100c1578063095ea7b3146100a1578063dd62ed
// 3e14610081576340c10f1914610061575f80fd5b61007c61006e60016101f7565b6100775f6101d9
// 565b61012e565b610216565b61009c61008e60016101d9565b6100975f6101d9565b610325565b61
// 020f565b6100bc6100ae60016101f7565b6100b75f6101d9565b61016b565b610216565b6100e66100ce60026101f7565b6100d860016101d9565b6100e15f6101d9565b61018c565b610216565b6101066100f860016101f7565b6101015f6101d9565b61015e565b610216565b6101136102b5565b61020f565b6101296101245f6101d9565b6102dd565b61020f565b9061015c9161014361013e610380565b610398565b61014c826102c1565b61015682826102ea565b5f61021d565b565b9061016991336101a4565b565b9061018a916101798161038d565b610184828233610333565b3361024b565b565b906101a2929161019d833383610340565b6101a4565b565b906101cc92916101b38261038d565b6101bd8382610302565b6101c783836102ea565b61021d565b565b600160e01b5f350490565b6101e2906101f7565b9060018060a01b031982166101f357565b5f80fd5b60200260040160208101361061020b573590565b5f80fd5b5f5260205ff35b600161020f565b9061024992917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610279565b565b9061027792917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925610279565b565b9091925f5260205fa3565b5f90565b600190565b6110000190565b61029d9061028d565b5f5260205260405f2090565b6102b1610284565b5490565b6102bd610288565b5490565b6102d2906102cd6102b5565b610369565b6102da610288565b55565b6102e69061028d565b5490565b6102f66102fe9161028d565b918254610369565b9055565b61030b9061028d565b90815461032061031b8284610364565b610398565b039055565b9061032f91610294565b5490565b9061033d91610294565b55565b9061034a91610294565b90815461035f61035a8284610364565b610398565b039055565b111590565b9190918281019283109083101761037c57565b5f80fd5b336103896102a9565b1490565b61039690610398565b565b1561039f57565b5f80fd

// 0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000048f3360005561047b61001460003961047b6000f3fe610009341561046d565b610011610227565b6370a08231811461006d576318160ddd811461008c5763a9059cbb81146100a1576323b872dd81146100ca5763095ea7b381146100fd5763dd62ed3e8114610126576340c10f19811461014f576100686017610275565b610174565b61008761008261007d6000610250565b61037e565b610275565b610174565b61009c610097610351565b610275565b610174565b6100bd6100ae6001610262565b6100b86000610250565b6101ad565b6100c561027f565b610174565b6100f06100d76002610262565b6100e16001610250565b6100eb6000610250565b6101df565b6100f861027f565b610174565b61011961010a6001610262565b6101146000610250565b6101bc565b61012161027f565b610174565b61014a6101456101366001610250565b6101406000610250565b6103d4565b610275565b610174565b61016b61015c6001610262565b6101666000610250565b61017a565b61017361027f565b5b5061047a565b61018a610185610450565b61046d565b61019382610361565b61019d8282610391565b6101a98282600061028b565b5050565b6101b88282336101fa565b5050565b6101c581610461565b6101d08282336103e9565b6101db8282336102be565b5050565b6101ea8333836103fa565b6101f58383836101fa565b505050565b61020382610461565b61020d83826103ac565b6102178383610391565b61022283838361028b565b505050565b60007c010000000000000000000000000000000000000000000000000000000060003504905090565b600061025b82610262565b9050919050565b6000602082026004018035915050919050565b8060005260206000f35b6102896001610275565b565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6102b8848484846102f1565b50505050565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256102eb848484846102f1565b50505050565b8360005282828260206000a350505050565b600090565b60006001905090565b600081611000019050919050565b600061032a82610311565b905080600052826020526040600020905092915050565b600061034b610303565b54905090565b600061035b610308565b54905090565b6103728161036d610351565b610432565b61037a610308565b5550565b600061038982610311565b549050919050565b61039a81610311565b6103a5838254610432565b8155505050565b6103b581610311565b80546103c96103c48286610424565b61046d565b838103825550505050565b60006103e0838361031f565b54905092915050565b826103f4838361031f565b55505050565b610404828261031f565b80546104186104138287610424565b61046d565b84810382555050505050565b600082821115905092915050565b60008282019050828110828210171561044a57600080fd5b92915050565b60003361045b610341565b14905090565b61046a8161046d565b50565b8061047757600080fd5b50565b0000000000000000000000000000000000